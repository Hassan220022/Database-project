Library Management System Documentation
Introduction
This project consists of a simple GUI application and a SQL script for a library management system. The GUI application is built with Python using the tkinter, customtkinter, and pypyodbc libraries. The SQL script sets up the database for the system.

SQL Database Setup (database.sql)
The SQL script database.sql creates a database named libManagement and sets up the necessary tables. It also inserts some initial data into the tables.

Database Creation
The script creates a database named libManagement and sets it as the active database.

Table Creation
The script creates five tables:

Author: Stores information about authors. Each author has an ID and a name.
_Member: Stores information about library members. Each member has an ID and a name.
Staff: Stores information about library staff. Each staff member has an ID and a name.
Book: Stores information about books. Each book has an ISBN, a title, an author ID, and a staff ID. The author ID and staff ID are foreign keys referencing the Author and Staff tables, respectively.
Borrow: Stores information about book borrows. Each borrow has an ID, a due date, a member ID, and an ISBN. The member ID and ISBN are foreign keys referencing the _Member and Book tables, respectively.
Data Insertion
The script inserts data into the Author, _Member, Staff, and Book tables. This data is used to populate the library management system with initial data.

Select Query
The script runs a select query on the Book table to fetch all records.

Docker Command
The script includes a Docker command to run a SQL Server container. This command uses the mcr.microsoft.com/mssql/server:2022-preview-ubuntu-22.04 image and sets the SA password and the PID. The container is named sqlpreview, and it maps port 1433 of the container to port 1433 of the host machine.

GUI Application (gui_lb.py)
The Python script gui_lb.py is the GUI application for the library management system. It connects to the libManagement database and allows staff and members to interact with the system.

Dependencies
tkinter
customtkinter
pypyodbc
Login Functionality
The login function is called when the "Login" button is clicked. It checks the entered username and password against the list of staff and members fetched from the database. If the credentials match a staff member, the staff_window function is called. If they match a member, the member_window function is called.

Staff Window
The staff_window function creates a new window with fields for a book title, ISBN, and author, and an "Add Book" button. When the "Add Book" button is clicked, the add_book function is called, which inserts a new book into the Book table in the database.

Member Window
The member_window function creates a new window with fields for a BorrowID, due date, and book title, and a "Borrow Book" button. When the "Borrow Book" button is clicked, the borrow_book function is called, which inserts a new record into the Borrow table in the database.

Running the Script
To run the application, simply execute the script with a Python interpreter:

python gui_lb.py
The GUI will appear, and you can interact with the library management system.

Conclusion
This project provides a simple and intuitive library management system. It allows staff to manage books and members to borrow books. The system is backed by a SQL Server database, which stores all the necessary data.